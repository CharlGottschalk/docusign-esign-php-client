<?php

declare(strict_types=1);

/**
 * FoldersApiListItemsOptions.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature Ruby Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Api\Options;


/**
 * FoldersApiListItemsOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature Ruby Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FoldersApiListItemsOptions
{
    /**
      * $from_date Only return items on or after this date. If no value is provided, the default search is the previous 30 days.
      * @var ?string
      */
    protected ?string $from_date = null;

    /**
     * Gets from_date
     *
     * @return ?string
     */
    public function getFromDate(): ?string
    {
        return $this->from_date;
    }

    /**
     * Sets from_date
     * @param ?string $from_date Only return items on or after this date. If no value is provided, the default search is the previous 30 days.
     *
     * @return self
     */
    public function setFromDate(?string $from_date): self
    {
        $this->from_date = $from_date;
        return $this;
    }
    /**
      * $include_items 
      * @var ?string
      */
    protected ?string $include_items = null;

    /**
     * Gets include_items
     *
     * @return ?string
     */
    public function getIncludeItems(): ?string
    {
        return $this->include_items;
    }

    /**
     * Sets include_items
     * @param ?string $include_items 
     *
     * @return self
     */
    public function setIncludeItems(?string $include_items): self
    {
        $this->include_items = $include_items;
        return $this;
    }
    /**
      * $owner_email The email of the folder owner.
      * @var ?string
      */
    protected ?string $owner_email = null;

    /**
     * Gets owner_email
     *
     * @return ?string
     */
    public function getOwnerEmail(): ?string
    {
        return $this->owner_email;
    }

    /**
     * Sets owner_email
     * @param ?string $owner_email The email of the folder owner.
     *
     * @return self
     */
    public function setOwnerEmail(?string $owner_email): self
    {
        $this->owner_email = $owner_email;
        return $this;
    }
    /**
      * $owner_name The name of the folder owner.
      * @var ?string
      */
    protected ?string $owner_name = null;

    /**
     * Gets owner_name
     *
     * @return ?string
     */
    public function getOwnerName(): ?string
    {
        return $this->owner_name;
    }

    /**
     * Sets owner_name
     * @param ?string $owner_name The name of the folder owner.
     *
     * @return self
     */
    public function setOwnerName(?string $owner_name): self
    {
        $this->owner_name = $owner_name;
        return $this;
    }
    /**
      * $search_text The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.
      * @var ?string
      */
    protected ?string $search_text = null;

    /**
     * Gets search_text
     *
     * @return ?string
     */
    public function getSearchText(): ?string
    {
        return $this->search_text;
    }

    /**
     * Sets search_text
     * @param ?string $search_text The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.
     *
     * @return self
     */
    public function setSearchText(?string $search_text): self
    {
        $this->search_text = $search_text;
        return $this;
    }
    /**
      * $start_position The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0.
      * @var ?string
      */
    protected ?string $start_position = null;

    /**
     * Gets start_position
     *
     * @return ?string
     */
    public function getStartPosition(): ?string
    {
        return $this->start_position;
    }

    /**
     * Sets start_position
     * @param ?string $start_position The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0.
     *
     * @return self
     */
    public function setStartPosition(?string $start_position): self
    {
        $this->start_position = $start_position;
        return $this;
    }
    /**
      * $status The current status of the envelope. If no value is provided, the default search is all/any status.
      * @var ?string
      */
    protected ?string $status = null;

    /**
     * Gets status
     *
     * @return ?string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets status
     * @param ?string $status The current status of the envelope. If no value is provided, the default search is all/any status.
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;
        return $this;
    }
    /**
      * $to_date Only return items up to this date. If no value is provided, the default search is to the current date.
      * @var ?string
      */
    protected ?string $to_date = null;

    /**
     * Gets to_date
     *
     * @return ?string
     */
    public function getToDate(): ?string
    {
        return $this->to_date;
    }

    /**
     * Sets to_date
     * @param ?string $to_date Only return items up to this date. If no value is provided, the default search is to the current date.
     *
     * @return self
     */
    public function setToDate(?string $to_date): self
    {
        $this->to_date = $to_date;
        return $this;
    }
}
